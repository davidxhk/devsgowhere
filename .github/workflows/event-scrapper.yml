name: (Manual) Event Scrapper

on:
  workflow_call:
    inputs:
      eventURL:
        description: 'Event URL to scrape'
        required: true
        type: string
      orgID:
        description: 'Organization ID to associate with the event'
        required: true
        type: string
      timezone:
        description: 'Timezone to use for the event'
        required: false
        type: string
        default: 'Asia/Singapore'
  workflow_dispatch:
    inputs:
      eventURL:
        description: 'Event URL to scrape'
        required: true
        type: string
      orgID:
        description: 'Organization ID to associate with the event'
        required: true
        type: string
      timezone:
        description: 'Timezone to use for the event'
        required: false
        type: string
        default: 'Asia/Singapore'

jobs:
  create-event:
    # use official Puppeteer image for headless Chrome
    runs-on: ubuntu-latest
    steps:
      - uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: ${{ github.event.inputs.timezone }}
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      # Generate a unique branch name
      - name: Generate branch name
        id: branch-name
        run: |
          echo "branch=event-scrapper/${{ github.run_id }}-${{ github.run_attempt }}" >> $GITHUB_OUTPUT
      # Create and switch to new branch
      # - name: Create branch
      #   run: git checkout -b ${{ steps.branch-name.outputs.branch }}
      # Install node dependencies
      - name: Install dependencies
        run: npm ci
      # Install Chrome for Puppeteer
      - name: Install Chrome
        run: npx puppeteer browsers install chrome
      # Run the event scrapper
      - name: Run event scrapper
        uses: mujo-code/puppeteer-headful@18.9.0
        env:
          CI: "true"
        with:
          args: |
            npm run create-event -- \
              --eventURL=${{ github.event.inputs.eventURL || inputs.eventURL }} \
              --orgID=${{ github.event.inputs.orgID || inputs.orgID }} \
              --no-sandbox
      # Use git status to check if there are any changes
      - name: Check for changes
        id: check-changes
        run: |
          # Check if there are any changes in the src/content directory
          git status --porcelain src/content/ > /dev/null
          # If there are changes, set the output variable
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi
      # If there are changes, commit them
      # - name: Commit changes
      #   if: steps.check-changes.outputs.changes == 'true'
      #   run: |
      #     git config --local user.email "github-actions[bot]@users.noreply.github.com"
      #     git config --local user.name "GitHub Actions"
      #     git add src/content/
      #     git commit -m "Add event for ${{ github.event.inputs.orgID }} from ${{ github.event.inputs.eventURL }}"
      #     git push --set-upstream origin ${{ steps.branch-name.outputs.branch }}
      # Create pull request
      - name: Create Pull Request
        id: create-pull-request
        if: steps.check-changes.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          # use the branch name generated earlier
          branch: ${{ steps.branch-name.outputs.branch }}
          # target the main branch
          base: main
          # paths to include in the pull request
          add-paths: |
            src/content/
          # commit message
          commit-message: "Add event for ${{ github.event.inputs.orgID }} from ${{ github.event.inputs.eventURL }}"
          # title of the pull request
          title: "Add event for ${{ github.event.inputs.orgID }} from ${{ github.event.inputs.eventURL }}"
          # body of the pull request
          body: |
            This pull request was automatically created by the event scrapper workflow.
            It adds an event for organization ID `${{ github.event.inputs.orgID }}` from the URL `${{ github.event.inputs.eventURL }}`.
          # labels: event
          labels: event
          # draft mode?
          draft: false
      # Print pull request info : number and URL
      - name: Print Pull Request info
        if: ${{ steps.create-pull-request.outputs.pull-request-number }}
        run: |
          echo "Pull Request created successfully!"
          echo "Pull Request Number: ${{ steps.create-pull-request.outputs.pull-request-number }}"
          echo "Pull Request URL: ${{ steps.create-pull-request.outputs.pull-request-url }}"


      